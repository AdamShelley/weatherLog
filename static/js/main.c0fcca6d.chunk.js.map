{"version":3,"sources":["nav/NavLinks.js","nav/NavContainer.js","shared/form/LocationForm.js","graph/Graph.js","graph/calculateTemps.js","week/DayComponents/DayOfWeek.js","week/DayComponents/Icon.js","week/DayComponents/Forecast.js","week/DayComponents/Temp.js","shared/components/Card.js","week/Day.js","week/Week.js","hourly/HourCard.js","hourly/Hourly.js","App.js","serviceWorker.js","index.js"],"names":["NavLinks","className","to","NavContainer","LocationForm","props","useState","location","setLocation","onSubmit","e","preventDefault","console","log","handler","type","value","onChange","target","Graph","renderLineChart","week","returnedData","calculateHandler","filterDays","days","fullDays","individualDay","data","list","forEach","day","date","dt_txt","split","length","push","listHighs","highest","highTemp","time","undefined","main","temp","Math","round","listLows","lowest","lowTemp","dayList","highs","lows","calculateTemps","index","indDay","name","high","low","width","height","margin","top","right","bottom","left","dataKey","stroke","label","angle","position","hourly","allData","map","DayOfWeek","newDate","Date","weekday","setTime","moment","format","Icon","iconCode","forecast","weather","Temp","toFixed","Card","extraStyle","children","Day","dailyForecast","dt","id","description","Week","daily","setForecast","setError","useEffect","a","fetch","loc","responseData","json","fetchWeather","filter","includes","locName","charAt","toUpperCase","slice","city","country","key","style","textDecoration","pathname","state","HourCard","Hourly","dayText","times","hour","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0fcca6d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./NavLinks.css\";\n\nconst NavLinks = () => {\n  return (\n    <div className=\"nav-links\">\n      <ul className=\"nav-links__list\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/\">About</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default NavLinks;\n","import React from \"react\";\nimport NavLinks from \"./NavLinks\";\n\nimport \"./NavContainer.css\";\n\nconst NavContainer = () => {\n  return (\n    <div className=\"nav-container\">\n      <NavLinks />\n    </div>\n  );\n};\n\nexport default NavContainer;\n","import React, { useState } from \"react\";\n\nimport \"./LocationForm.css\";\n\nconst LocationForm = props => {\n  const [location, setLocation] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(location);\n    console.log(\"submitted\");\n    props.handler(location);\n  };\n  return (\n    <div className=\"location-form-container\">\n      <h2>Where in the world are you? </h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={location}\n          onChange={e => setLocation(e.target.value)}\n        />\n        <button>Here!</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LocationForm;\n","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip\n} from \"recharts\";\n\nimport { calculateTemps } from \"./calculateTemps\";\nimport \"./Graph.css\";\n\nconst Graph = props => {\n  let renderLineChart;\n\n  // If the graph needs to be 5 day week\n  if (props.week) {\n    console.log(\"weekly graph\");\n    const { calculateHandler } = calculateTemps();\n\n    const returnedData = calculateHandler(props);\n\n    console.log(returnedData);\n    let data = [];\n    returnedData.dayList.forEach((day, index) => {\n      const date = day[0].dt_txt.split(\" \")[0];\n\n      let indDay = {\n        name: date,\n        high: returnedData.highs[index],\n        low: returnedData.lows[index]\n      };\n\n      data.push(indDay);\n    });\n\n    renderLineChart = (\n      <LineChart\n        width={800}\n        height={350}\n        data={data}\n        margin={{ top: 5, right: 50, bottom: 10, left: 0 }}\n      >\n        <Line type=\"monotone\" dataKey=\"high\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"low\" stroke=\"#000\" />\n        {/* <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" /> */}\n        <XAxis dataKey=\"name\" />\n        <YAxis\n          label={{ value: \"Temp. C \", angle: -90, position: \"insideLeft\" }}\n        />\n        <Tooltip />\n      </LineChart>\n    );\n    // If the graph is needed for hourly graph\n  } else if (props.hourly) {\n    let allData = [];\n    props.data.map(day => {\n      let temp = {\n        name: day.dt_txt.split(\" \")[1],\n        high: day.main.temp\n      };\n      allData.push(temp);\n    });\n\n    renderLineChart = (\n      <LineChart\n        width={800}\n        height={350}\n        data={allData}\n        margin={{ top: 5, right: 30, bottom: 10, left: 0 }}\n      >\n        <Line type=\"monotone\" dataKey=\"high\" stroke=\"#8884d8\" />\n        {/* <Line type=\"monotone\" dataKey=\"low\" stroke=\"#333\" /> */}\n        {/* <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" /> */}\n        <XAxis dataKey=\"name\" />\n        <YAxis\n          label={{ value: \"Temp. C\", angle: -90, position: \"insideLeft\" }}\n        />\n        <Tooltip />\n      </LineChart>\n    );\n  }\n\n  return <div className=\"graph-container\">{renderLineChart}</div>;\n};\n\nexport default Graph;\n","export const calculateTemps = () => {\n  const filterDays = days => {\n    let fullDays = [];\n    let individualDay = [];\n    // Check for each day\n    days.data.list.forEach(day => {\n      // take the date\n      const date = day.dt_txt.split(\" \")[0];\n      // compare versus the previous date\n      if (\n        individualDay.length === 0 ||\n        individualDay[0].dt_txt.split(\" \")[0] === date\n      ) {\n        individualDay.push(day);\n      } else {\n        // if its different submit the array to the full days + clear individual day\n        fullDays.push(individualDay);\n        individualDay = [];\n      }\n    });\n    return fullDays;\n  };\n\n  const listHighs = days => {\n    const fullDays = filterDays(days);\n    // Select the highest temperature for that specific day\n    let highest = [];\n\n    fullDays.forEach(day => {\n      let highTemp;\n      day.forEach(time => {\n        if (highTemp === undefined || highTemp < time.main.temp) {\n          highTemp = Math.round(time.main.temp * 10) / 10;\n        }\n      });\n      highest.push(highTemp);\n    });\n\n    return highest;\n  };\n\n  // Return the list of low temperature for the next 5 days\n  const listLows = days => {\n    const fullDays = filterDays(days);\n    // Select the lowest temperature for that specific day\n    let lowest = [];\n\n    fullDays.forEach(day => {\n      let lowTemp;\n      day.forEach(time => {\n        if (lowTemp === undefined || lowTemp > time.main.temp) {\n          lowTemp = Math.round(time.main.temp * 10) / 10;\n        }\n      });\n      lowest.push(lowTemp);\n    });\n\n    return lowest;\n  };\n\n  // To return all data\n  const calculateHandler = days => {\n    let dayList = filterDays(days);\n    let highs = listHighs(days);\n    let lows = listLows(days);\n\n    return { dayList, highs, lows };\n  };\n\n  return { listHighs, listLows, calculateHandler };\n};\n","import React from \"react\";\n\nimport \"./DayOfWeek.css\";\nimport moment from \"moment\";\n\nconst DayOfWeek = props => {\n  console.log(props);\n  // Format date\n  // const date = props.date.split(\" \")[0].split(\"-\")[2];\n  // const month = props.date.split(\" \")[0].split(\"-\")[1];\n\n  let newDate = new Date();\n  const weekday = props.day * 1000;\n  newDate.setTime(weekday);\n\n  moment(newDate).format(\"dddd\");\n\n  return (\n    <div className=\"day-of-week\">\n      {/* <h1>\n        {date} - {month}\n      </h1> */}\n      {props.week && <h2>{moment(newDate).format(\"MMMM Do\")}</h2>}\n      {!props.week && <h2>{moment(newDate).format(\"MMMM Do, h:mm a\")}</h2>}\n    </div>\n  );\n};\n\nexport default DayOfWeek;\n","import React from \"react\";\n\nimport \"./Icon.css\";\n\nconst Icon = props => {\n  return (\n    <div className=\"forecast-icon\">\n      <i className={`owf owf-${props.iconCode}-d owf-5x`}></i>\n    </div>\n  );\n};\n\nexport default Icon;\n","import React from \"react\";\n\nimport \"./Forecast.css\";\n\nconst forecast = props => {\n  console.log(props);\n  return (\n    <div>\n      <h2>{props.weather} </h2>\n    </div>\n  );\n};\n\nexport default forecast;\n","import React from \"react\";\n\nimport \"./Temp.css\";\n\nconst Temp = props => {\n  console.log(props);\n  return <div className=\"temp-data\">{props.temp.temp.toFixed()} °C</div>;\n};\n\nexport default Temp;\n","import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = props => {\n  return <div className={`card ${props.extraStyle}`}>{props.children}</div>;\n};\n\nexport default Card;\n","import React from \"react\";\nimport DayOfWeek from \"./DayComponents/DayOfWeek\";\nimport Icon from \"./DayComponents/Icon\";\nimport Forecast from \"./DayComponents/Forecast\";\nimport Temp from \"./DayComponents/Temp\";\n\nimport Card from \"../shared/components/Card\";\n\nimport \"./Day.css\";\n\nconst Day = props => {\n  console.log(props);\n  return (\n    <Card>\n      <div className=\"day-container\">\n        {/* <h1>This is the day tab</h1> */}\n        <DayOfWeek\n          day={props.dailyForecast.dt}\n          date={props.dailyForecast.dt_txt}\n          week={props.week ? true : false}\n        />\n        <Icon iconCode={props.dailyForecast.weather[0].id} />\n        <Forecast weather={props.dailyForecast.weather[0].description} />\n        <Temp temp={props.dailyForecast.main} />\n      </div>\n    </Card>\n  );\n};\n\nexport default Day;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport Graph from \"../graph/Graph\";\nimport Day from \"./Day\";\n\nimport \"./Week.css\";\n\n// const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n\nconst Week = props => {\n  console.log(props);\n  const [forecast, setForecast] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        let responseData = await fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?q=${props.loc}&units=metric&appid=daea4b2b7ea6afe405712e5fcd31d174`\n        );\n\n        let data = await responseData.json();\n\n        setForecast(data);\n      } catch (err) {\n        console.log(err);\n        setError(true);\n      }\n    };\n    fetchWeather();\n  }, [props.loc]);\n\n  let daily;\n  if (forecast !== undefined) {\n    daily = forecast.list.filter(day => {\n      return day.dt_txt.includes(\"12:00:00\");\n    });\n  }\n\n  let locName = props.loc.charAt(0).toUpperCase() + props.loc.slice(1);\n\n  return (\n    <div className=\"week-container\">\n      {/* <h1>This is the weektab</h1> */}\n      {forecast && (\n        <h2>\n          {locName}, {forecast.city.country}\n        </h2>\n      )}\n      <ul className=\"week-container__list\">\n        {forecast &&\n          daily.map(day => {\n            return (\n              <li key={day.dt} className=\"week-day__listitem\">\n                <Link\n                  style={{ textDecoration: \"none\" }}\n                  to={{\n                    pathname: \"/hourly/\" + day.dt,\n                    state: { location: props.loc, day: day, week: forecast }\n                  }}\n                >\n                  <Day dailyForecast={day} week={true} />\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n      <h3>Click a day for 3-hour forecast.</h3>\n      {forecast && <Graph id=\"chart\" data={forecast} week />}\n    </div>\n  );\n};\n\nexport default Week;\n","import React from \"react\";\n\nimport Card from \"../shared/components/Card\";\nimport DayOfWeek from \"../week/DayComponents/DayOfWeek\";\nimport Icon from \"../week/DayComponents/Icon\";\nimport Forecast from \"../week/DayComponents/Forecast\";\nimport Temp from \"../week/DayComponents/Temp\";\n\nimport \"./HourCard.css\";\n\nconst HourCard = props => {\n  console.log(props);\n  return (\n    <Card extraStyle={\"hour-card\"}>\n      <div className=\"day-container\">\n        {/* <h1>This is the day tab</h1> */}\n        <DayOfWeek day={props.data.dt} date={props.data.dt_txt} />\n        <Icon iconCode={props.data.weather[0].id} />\n        <Forecast weather={props.data.weather[0].description} />\n        <Temp temp={props.data.main} />\n      </div>\n    </Card>\n  );\n};\n\nexport default HourCard;\n","import React from \"react\";\nimport HourCard from \"./HourCard\";\nimport Graph from \"../graph/Graph\";\n\nimport \"./Hourly.css\";\n\nconst Hourly = props => {\n  console.log(props);\n  // const { day } = props.match.params;\n  const { location, day, week } = props.location.state;\n  console.log(day);\n  // console.log(week);\n\n  // Find the DAY\n  const dayText = day.dt_txt.split(\" \")[0];\n\n  // Find all the same day\n\n  const times = week.list.filter(time => {\n    const d = time.dt_txt.split(\" \")[0];\n    return d === dayText;\n  });\n\n  console.log(times);\n\n  return (\n    <div className=\"hourly-container\">\n      {/* <h2>Hourly logs</h2> */}\n      <h2>\n        {location}, {week.city.country}\n      </h2>\n      <ul className=\"hourly-container__list\">\n        {times &&\n          times.map(hour => {\n            return (\n              <li key={hour.dt} className=\"hour__listitem\">\n                <HourCard data={hour} />\n              </li>\n            );\n          })}\n      </ul>\n\n      {times && <Graph id=\"chart\" data={times} hourly />}\n    </div>\n  );\n};\n\nexport default Hourly;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport NavContainer from \"./nav/NavContainer\";\nimport LocationForm from \"./shared/form/LocationForm\";\nimport Week from \"./week/Week\";\n\nimport Hourly from \"./hourly/Hourly\";\n\nfunction App() {\n  const [location, setLocation] = useState();\n\n  const locationHandler = loc => {\n    setLocation(loc);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <Router>\n        <div className=\"nav-bar\">\n          <div className=\"empty\"></div>\n          <h1>Weatherlog</h1>\n          <NavContainer />\n        </div>\n        <Switch>\n          <Route path=\"/\" exact>\n            <LocationForm handler={locationHandler} />\n            <Week loc={location || \"London\"} />\n          </Route>\n          <Route path=\"/hourly/:day\" exact component={Hourly}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}